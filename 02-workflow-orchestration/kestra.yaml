id: ingest_nyc_green_taxi
namespace: company.team

concurrency:
  limit: 1

inputs:
  - id: inputs
    type: STRING
    defaults: "Hello World!"
    displayName: "A string input"

triggers:
  - id: schedule_green_dataset
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "0 0 5 * *" # every 5th of the month
    
variables:
  file: "{{inputs.taxi_color}}_tripdata_{{trigger.date | date('yyyy-MM')}}.csv"
  staging_table: "public.{{inputs.taxi_color}}_tripdata_staging"
  final_table: "public.{{inputs.taxi_color}}_tripdata"
  data: "{{outputs.extract.outputFiles[inputs.taxi_color ~ '_tripdata_' ~ (trigger.date | date('yyyy-MM')) ~ '.csv']}}"
  data_url: "https://github.com/DataTalksClub/nyc-tlc-data/releases/download/{{inputs.taxi_color}}/{{inputs.taxi_color}}_tripdata_{{trigger.date | date('yyyy-MM')}}.csv.gz"

tasks:
  - id: pythoniprender
    type: io.kestra.plugin.scripts.python.Script
    taskRunner:
      type: io.kestra.plugin.scripts.runner.docker.Docker
    containerImage: bitnami/python:latest
    script: |
      print("""{{inputs.taxi_color}}""")
  - id: setlabel
    type: io.kestra.plugin.core.execution.Labels
    labels:
      file: "{{render(vars.file)}}"
      color: "{{inputs.taxi_color}}"
  - id: wdir
    type: io.kestra.plugin.core.flow.WorkingDirectory
    tasks:
      - id: clone_repository
        type: io.kestra.plugin.git.Clone
        url: https://github.com/arjunrarjunr/data-engineering-zoomcamp-2025.git
        branch: main
      
      - id: extract
        type: io.kestra.plugin.scripts.shell.Commands
        outputFiles:
          - "*.csv"
        taskRunner:
          type: io.kestra.plugin.core.runner.Process
        commands:
          - wget -qO- {{render(vars.data_url)}} | gunzip > {{render(vars.file)}}

      - id: create_staging_table
        type: io.kestra.plugin.jdbc.postgresql.Query

        url: jdbc:postgresql://postgres_db_container:5432/ny_taxi
        username: root
        password: root
        sql: |
          CREATE TABLE IF NOT EXISTS {{render(vars.staging_table)}} (
              unique_key text,
              file_name text,
              VendorID bigint,
              lpep_pickup_datetime timestamp without time zone,
              lpep_dropoff_datetime timestamp without time zone,
              store_and_fwd_flag text,
              RatecodeID bigint,
              PULocationID bigint,
              DOLocationID bigint,
              passenger_count bigint,
              trip_distance double precision,
              fare_amount double precision,
              extra double precision,
              mta_tax double precision,
              tip_amount double precision,
              tolls_amount double precision,
              ehail_fee double precision,
              improvement_surcharge double precision,
              total_amount double precision,
              payment_type bigint,
              trip_type double precision,
              congestion_surcharge double precision
          );

      - id: truncate_staging_table
        type: io.kestra.plugin.jdbc.postgresql.Query

        url: jdbc:postgresql://postgres_db_container:5432/ny_taxi
        username: root
        password: root
        sql: |
          TRUNCATE TABLE {{render(vars.staging_table)}};
      - id: create_final_table
        type: io.kestra.plugin.jdbc.postgresql.Query

        url: jdbc:postgresql://postgres_db_container:5432/ny_taxi
        username: root
        password: root
        sql: |
          CREATE TABLE IF NOT EXISTS {{render(vars.final_table)}} (
              unique_key text,
              file_name text,
              VendorID bigint,
              lpep_pickup_datetime timestamp without time zone,
              lpep_dropoff_datetime timestamp without time zone,
              store_and_fwd_flag text,
              RatecodeID bigint,
              PULocationID bigint,
              DOLocationID bigint,
              passenger_count bigint,
              trip_distance double precision,
              fare_amount double precision,
              extra double precision,
              mta_tax double precision,
              tip_amount double precision,
              tolls_amount double precision,
              ehail_fee double precision,
              improvement_surcharge double precision,
              total_amount double precision,
              payment_type bigint,
              trip_type double precision,
              congestion_surcharge double precision
          );
      - id: stage_data
        type: io.kestra.plugin.jdbc.postgresql.CopyIn

        url: jdbc:postgresql://postgres_db_container:5432/ny_taxi
        username: root
        password: root
        from: "{{render(vars.data)}}"
        table: "{{render(vars.staging_table)}}"
        format: CSV
        header: true
        columns:
          [
            VendorID,
            lpep_pickup_datetime,
            lpep_dropoff_datetime,
            store_and_fwd_flag,
            RatecodeID,
            PULocationID,
            DOLocationID,
            passenger_count,
            trip_distance,
            fare_amount,
            extra,
            mta_tax,
            tip_amount,
            tolls_amount,
            ehail_fee,
            improvement_surcharge,
            total_amount,
            payment_type,
            trip_type,
            congestion_surcharge,
          ]

      - id: update_staging_table
        type: io.kestra.plugin.jdbc.postgresql.Query

        url: jdbc:postgresql://postgres_db_container:5432/ny_taxi
        username: root
        password: root
        sql: |
          UPDATE {{render(vars.staging_table)}}
          SET file_name = '{{render(vars.file)}}'
          WHERE file_name IS NULL;
          UPDATE {{render(vars.staging_table)}}
          SET unique_key = md5('{{render(vars.file)}}' || COALESCE(CAST(VendorID AS TEXT), '') || COALESCE(CAST(lpep_pickup_datetime AS TEXT), '') || COALESCE(CAST(lpep_dropoff_datetime AS TEXT), '') || COALESCE(CAST(PULocationID AS TEXT), '') || COALESCE(CAST(DOLocationID AS TEXT), '') || COALESCE(CAST(passenger_count AS TEXT), '') || COALESCE(CAST(trip_distance AS TEXT), '') || COALESCE(CAST(fare_amount AS TEXT), ''))
          WHERE unique_key IS NULL;

      - id: load_table
        type: io.kestra.plugin.jdbc.postgresql.Query

        url: jdbc:postgresql://postgres_db_container:5432/ny_taxi
        username: root
        password: root
        sql: |
          MERGE INTO {{render(vars.final_table)}} AS target
          USING {{render(vars.staging_table)}} AS source
          ON target.unique_key = source.unique_key
          WHEN NOT MATCHED THEN
            INSERT (
              unique_key,
              file_name,
              VendorID,
              lpep_pickup_datetime,
              lpep_dropoff_datetime,
              store_and_fwd_flag,
              RatecodeID,
              PULocationID,
              DOLocationID,
              passenger_count,
              trip_distance,
              fare_amount,
              extra,
              mta_tax,
              tip_amount,
              tolls_amount,
              ehail_fee,
              improvement_surcharge,
              total_amount,
              payment_type,
              trip_type,
              congestion_surcharge
            )
            VALUES (
              source.unique_key,
              source.file_name,
              source.VendorID,
              source.lpep_pickup_datetime,
              source.lpep_dropoff_datetime,
              source.store_and_fwd_flag,
              source.RatecodeID,
              source.PULocationID,
              source.DOLocationID,
              source.passenger_count,
              source.trip_distance,
              source.fare_amount,
              source.extra,
              source.mta_tax,
              source.tip_amount,
              source.tolls_amount,
              source.ehail_fee,
              source.improvement_surcharge,
              source.total_amount,
              source.payment_type,
              source.trip_type,
              source.congestion_surcharge
            );
      - id: stage_count_val
        type: io.kestra.plugin.jdbc.postgresql.Query
        url: jdbc:postgresql://postgres_db_container:5432/ny_taxi
        username: root
        password: root
        sql: |
          SELECT COUNT(*) AS staging_count FROM {{render(vars.staging_table)}}
        fetchType: FETCH_ONE

      - id: stage_log_count
        type: io.kestra.plugin.core.log.Log
        message: |
          Staging Records loaded: {{ outputs.stage_count_val.row.staging_count }}

      - id: final_count_val
        type: io.kestra.plugin.jdbc.postgresql.Query
        url: jdbc:postgresql://postgres_db_container:5432/ny_taxi
        username: root
        password: root
        sql: |

          SELECT COUNT(*) AS final_count FROM {{render(vars.final_table)}};
        fetchType: FETCH_ONE

      - id: final_log_count
        type: io.kestra.plugin.core.log.Log
        message: |
          Final Records loaded: {{ outputs.final_count_val.row.final_count }}

      - id: purge_execution_files
        type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
        description: delete all files
        
  


